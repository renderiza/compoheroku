#scene_show.row
	.col-md-8.col-md-offset-2
		.panel.panel-default


			.panel-heading
				.container
					%ul.nav.navbar-nav.navbar-left
						%li
							= link_to root_path do 
								%button.btn.btn-primary{type: "button"}
									Download
									%span.badge.badge-light= "RBZ"

					%ul.nav.navbar-nav.navbar-right
						%li
							= link_to root_path do 
								%button.btn.btn-success{type: "button"}
									Go Premium
									%span.badge.badge-light= "$20 / mo"


			.panel-heading
				/- if current_user
				/	= image_tag current_user.avatar.url(:thumb), class: "avatar"
				/	%p= current_user.username



				.modal-body
					/ CAROUSEL CODE GOES HERE
					#myGallery.carousel.slide{"data-interval" => "false"}
						.carousel-inner
							.item.active
								= image_tag("1.png", 
									alt: "Image description here",           
									class: "img-responsive")                 
								.carousel-caption
									%h3 Composcene for SketchUp
									%p Composite your own SketchUp renders.
							.item
								= image_tag("2.png", 
									alt: "Image description here",               
									class: "img-respponsive")                    
								.carousel-caption
									%h3 
									%p 
							.item
								= image_tag("3.png", 
									alt: "Image description here",               
									class: "img-respponsive")                    
								.carousel-caption
									%h3 
									%p 
							
						/ end carousel-inner
						/ Previous and Next buttons
						%a.left.carousel-control{"data-slide" => "prev", href: "#myGallery", role: "button"}
							%span.glyphicon.glyphicon-chevron-left
						%a.right.carousel-control{"data-slide" => "next", href: "#myGallery", role: "button"}
							%span.glyphicon.glyphicon-chevron-right
					/ myGallery
				/ modal-body

				.container

					%ul.list-group
						%li.list-group-item
						
							Take your SketchUp rendering to the next level with CompoScene!

						

						%li.list-group-item

							Create & export SketchUp scenes with rendering channels for compositing in Photoshop or other painting apps.

							%br/
							%br/

							There are many rendering apps out there, but self-expression can only ever come from you. If you let the software take over then you're in danger of composing renders that clone the same look dictated by the app and not you.


			



			.panel-heading

				.container
					%ul.nav.navbar-nav.navbar-left
						%li
							= link_to scenes_path do 
								%button.btn.btn-primary{type: "button"}
									Scenes
									%span.badge.badge-light= "#{@scenes.length}"

						%li
							- @boards = Board.all
							= link_to boards_path do 
								%button.btn.btn-default{type: "button"}
									Boards
									%span.badge.badge-light= "#{@boards.length}"

					%ul.nav.navbar-nav.navbar-right
						%li
			

				
			.panel-body
				%ul
					%li.img
						= link_to root_path do 
							%button.btn.btn-default{type: "button"}
								Export SketchUp Scenes
								/%span.badge.badge-light= "$10 / mo"

				%h2 All Scenes

				.box.panel.panel-default.new
						
					= link_to new_scene_path, class: ""  do
						.glyphicon.glyphicon-plus.big.append.text-info.tip{"data-placement" => "bottom", "data-tip" => "tip-new", :onclick => "JavaScript:play()"}

				- @scenes.each do |scene|
					- if not scene.is_repost?
               
						.box.panel.panel-default
							
							- @info = {"name" => scene.name, "description" => scene.description}
							- @rop = {"shadows" => scene.shadows,"dark" => scene.dark,"light" => scene.light,"sun" => scene.sun,"fog" => scene.fog,"bg_color" => scene.bg_color,"fog_color" => scene.fog_color,"fog_use_bk" => scene.fog_use_bk,"color_by_layer" => scene.color_by_layer,"edge" => scene.edge,"render_mode" => scene.render_mode,"sky_color" => scene.sky_color,"draw_sky" => scene.draw_sky,"draw_ground" => scene.draw_ground,"ground_color" => scene.ground_color,"depth_cue" => scene.depth_cue,"hidden" => scene.hidden,"endpoints" => scene.endpoints,"profiles" => scene.profiles  }
							


							
							%audio#audio{:src => audio_path("pick.wav")}
							/%a{:href => "JavaScript:play()"}
							/=image_tag( scene.image.url(:thumb), class: "scene", :onclick => "myScene('#{scene.name}','#{scene.description}','#{@rop}')" )
							
							%ul.user
								
								%li.img
									= link_to (image_tag scene.image.url(:thumb), class: "scene"), scene

								%li
									= link_to scene, class: "title"  do
										= truncate scene.name, length: 24

								%li.user
									= link_to user_path(scene.user.username), class: "small_avatar"  do
										= image_tag scene.user.avatar.url(:thumb), class: "small_avatar"
								%li
									%p.username
										by
										= link_to user_path(scene.user.username), class: "username"  do
											= scene.user.username

								%li.button
									%a{class: "btn btn-default btn-m", onclick: "JavaScript:myScene('#{scene.name}','#{scene.description}','#{@rop}')"} Create Scene
										
							
/ Tips content
#tip-new.tip-content.hidden
	%p New Scene
#tip-account.tip-content.hidden
	%p Account
#tip-logout.tip-content.hidden
	%p Log Out

:javascript

	function myScene( name, description, rop ){
		sketchup.say( name, description, rop );
	}

	// Audio
	function play(){
		var audio = document.getElementById("audio");
		audio.play();
	}

	// Tooltips
	$('.tip').each(function () {
		$(this).tooltip(
		{
			html: true,
			title: $('#' + $(this).data('tip')).html()
		});
	});